#ifndef _QUADRATURE_METHOD_H_
#define _QUADRATURE_METHOD_H_


namespace Quadrature {

template<typename M>
class Method
{
	template<typename Function, typename real>
	class FunctionFromMinusInfinity
	{
		const Function& f;
		real a;
	public:		
		FunctionFromMinusInfinity(const Function& _f, const real& _a) :
			f(_f), a(_a) { }

		auto operator()(real t) const -> decltype(f(t))
		{
			return (real(1.0)/(t*t))*f(a - (real(1.0) - t)/t);
		}
	};

	template<typename Function, typename real>
	class FunctionToInfinity
	{
		const Function& f;
		real a;
	public:		
		FunctionToInfinity(const Function& _f, const real& _a) :
			f(_f), a(_a) { }

		auto operator()(real t) const -> decltype(f(t))
		{
			return (real(1.0)/((real(1.0) - t)*(real(1.0) - t)))*f(a + (t/(real(1.0) - t)));
		}
	};

	template<typename Function>
	class FunctionFromMinusInfinityToInfinity
	{
	public:
		const Function& f;
		FunctionFromMinusInfinityToInfinity(const Function& _f) :
			f(_f) { }

		template<typename real>
		auto operator()(real t) const -> decltype(f(t))
		{
			real t2 = t*t;
			return ((real(1.0)+t2)/((real(1.0) - t2)*(real(1.0) - t2)))*f(t/(real(1.0) - t2));
		}
	};

public:
	template<typename Function, typename real>
	auto integrate_from_minus_inf(const Function& f, real b) const -> decltype(f(b))
	{
		FunctionFromMinusInfinity<Function, real> variable_changed_function(f,b);
		return static_cast<const M&>(*this).integrate(variable_changed_function,real(0.0), real(1.0));
	}

	template<typename Function, typename real>
	auto integrate_to_inf(const Function& f, real a) const -> decltype(f(a))
	{
		FunctionToInfinity<Function, real> variable_changed_function(f,a);
		return static_cast<const M&>(*this).integrate(variable_changed_function,real(0.0), real(1.0));
	}

	template<typename Function, typename real = float>
	auto integrate_from_minus_inf_to_inf(const Function& f) const -> decltype(f(real(0.0)))
	{
		FunctionFromMinusInfinityToInfinity<Function> variable_changed_function(f);
		return static_cast<const M&>(*this).integrate(variable_changed_function,real(-1.0), real(1.0));
	}

};

};

#endif

